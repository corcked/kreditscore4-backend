#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–π–º–∞ –∫ production –±–∞–∑–µ
"""
import os
import asyncio
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

def main():
    """–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∑–∞–π–º–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º async URL –≤ sync
    sync_url = database_url.replace("postgresql+asyncpg://", "postgresql://")
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        engine = create_engine(sync_url)
        
        with engine.connect() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                AND column_name IN ('loan_amount', 'loan_term', 'loan_purpose', 'monthly_income')
            """))
            
            existing_columns = [row[0] for row in result.fetchall()]
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_columns)} –∏–∑ 4 –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–π–º–∞: {existing_columns}")
            
            if len(existing_columns) == 4:
                print("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–π–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            with conn.begin() as trans:
                print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏...")
                
                if 'loan_amount' not in existing_columns:
                    conn.execute(text("ALTER TABLE users ADD COLUMN loan_amount FLOAT"))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ loan_amount")
                
                if 'loan_term' not in existing_columns:
                    conn.execute(text("ALTER TABLE users ADD COLUMN loan_term INTEGER"))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ loan_term")
                
                if 'loan_purpose' not in existing_columns:
                    conn.execute(text("ALTER TABLE users ADD COLUMN loan_purpose VARCHAR(100)"))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ loan_purpose")
                
                if 'monthly_income' not in existing_columns:
                    conn.execute(text("ALTER TABLE users ADD COLUMN monthly_income FLOAT"))
                    print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ monthly_income")
                
                print("üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            result = conn.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                AND column_name IN ('loan_amount', 'loan_term', 'loan_purpose', 'monthly_income')
                ORDER BY column_name
            """))
            
            print("\nüìã –ö–æ–ª–æ–Ω–∫–∏ –∑–∞–π–º–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
            for row in result.fetchall():
                print(f"  ‚Ä¢ {row[0]}: {row[1]}")
            
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

if __name__ == "__main__":
    main() 