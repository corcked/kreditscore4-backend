from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import os
from alembic.config import Config
from alembic import command
from sqlalchemy import create_engine
import json

from app.api import auth, users
from app.database import engine, Base
from app.bot.bot import telegram_bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(
    title="KreditScore4 API",
    description="API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
allowed_origins = [
    "http://localhost:3000",  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    "https://frontend-production-5830.up.railway.app",  # Production frontend
    "https://kreditscore4-frontend-production.up.railway.app",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ www –≤–µ—Ä—Å–∏–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    "https://www.frontend-production-5830.up.railway.app",
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
frontend_url = os.getenv("FRONTEND_URL")
if frontend_url and frontend_url not in allowed_origins:
    allowed_origins.append(frontend_url)

print(f"üîß CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: allow_origins=['*'], allow_credentials=False (–≤—Ä–µ–º–µ–Ω–Ω–æ)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    allow_credentials=False,  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(users.router, prefix="/api/users", tags=["users"])

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º Alembic –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        alembic_cfg = Config("alembic.ini")
        
        # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è sync SQLAlchemy
        database_url = os.getenv("DATABASE_URL")
        if database_url and "postgresql+asyncpg://" in database_url:
            sync_url = database_url.replace("postgresql+asyncpg://", "postgresql://")
            alembic_cfg.set_main_option("sqlalchemy.url", sync_url)
        
        command.upgrade(alembic_cfg, "head")
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        print("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ create_all...")
        
        # Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ create_all")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot webhook
    try:
        print("ü§ñ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram Bot webhook...")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        webhook_url = os.getenv("WEBHOOK_URL")
        if not webhook_url:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –∏–∑ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            railway_static_url = os.getenv("RAILWAY_STATIC_URL")
            if railway_static_url:
                webhook_url = f"https://{railway_static_url}"
            else:
                print("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await telegram_bot.application.initialize()
        await telegram_bot.application.start()
        
        full_webhook_url = f"{webhook_url}/webhook"
        await telegram_bot.application.bot.set_webhook(url=full_webhook_url)
        print(f"‚úÖ Telegram Bot webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_webhook_url}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram Bot: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        print("ü§ñ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram Bot...")
        await telegram_bot.application.stop()
        print("‚úÖ Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram Bot: {e}")

@app.get("/")
async def root():
    return {"message": "KreditScore4 API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update_data = await request.json()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Update –∏–∑ telegram –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from telegram import Update
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        update = Update.de_json(update_data, telegram_bot.application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await telegram_bot.application.process_update(update)
        
        return {"status": "ok"}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)} 